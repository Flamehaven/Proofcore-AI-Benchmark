/**
 * OpenAPI Schema Types
 *
 * AUTO-GENERATED FILE - DO NOT EDIT
 *
 * This file is generated by running:
 *   npm run api:generate        (from running backend)
 *   npm run api:generate:local  (from local schema file)
 *
 * Placeholder types provided below for initial setup.
 * Run the generation command to create real types from your FastAPI backend.
 */

export interface paths {
  '/api/v1/proofs': {
    get: {
      parameters?: {
        query?: {
          limit?: number;
          offset?: number;
          status?: string;
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              items: Array<{
                id: number;
                domain: string;
                valid: boolean;
                lii: number;
                coherence: number;
                depth: number;
                cycles: number;
              }>;
              total: number;
              skip: number;
              limit: number;
            };
          };
        };
      };
    };
    post: {
      requestBody: {
        content: {
          'application/json': {
            domain: string;
            steps: Array<{
              id: number;
              claim: string;
              equation?: { lhs: string; rhs: string };
            }>;
          };
        };
      };
      responses: {
        201: {
          content: {
            'application/json': {
              id: number;
              domain: string;
              valid: boolean;
              lii: number;
              coherence: number;
              depth: number;
              cycles: number;
            };
          };
        };
      };
    };
  };
  '/api/v1/proofs/{id}': {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              id: number;
              domain: string;
              valid: boolean;
              lii: number;
              coherence: number;
              depth: number;
              cycles: number;
              steps: Array<any>;
            };
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          'application/json': {
            domain?: string;
            steps?: Array<any>;
          };
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              id: number;
              domain: string;
              valid: boolean;
              lii: number;
            };
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        204: {
          content: {};
        };
      };
    };
  };
  '/api/v1/settings': {
    get: {
      responses: {
        200: {
          content: {
            'application/json': {
              theme: string;
              notifications: boolean;
              autoSave: boolean;
            };
          };
        };
      };
    };
    put: {
      requestBody: {
        content: {
          'application/json': {
            theme?: string;
            notifications?: boolean;
            autoSave?: boolean;
          };
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              theme: string;
              notifications: boolean;
              autoSave: boolean;
            };
          };
        };
      };
    };
  };
  '/health': {
    get: {
      responses: {
        200: {
          content: {
            'application/json': {
              status: 'ok' | 'error';
              timestamp: string;
              version: string;
            };
          };
        };
      };
    };
  };
}
